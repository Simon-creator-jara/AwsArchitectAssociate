---
AWSTemplateFormatVersion: 2010-09-09
Description: This cloud formation is to deploy a basic 

Parameters:
  pprofilename:
    Description: Instance profile name
    Type: String
  
  pscgroupname:
    Description: Sec group for ec2
    Type: String
  
  pvpcId:
    Description: vpc ID
    Type: String

  psubnetId:
    Description: subnet ID
    Type: String
    
  psubnetId2:
    Description: subnet ID
    Type: String

  LatestECSOptimizedAMI: 
    Description: "AMI ID"
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ecs/optimized-ami/amazon-linux-2/kernel-5.10/recommended/image_id"

  pnameELB:
    Description: Name ELB
    Type: String

Resources:

  rSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 security group
      GroupName: !Ref pscgroupname
      SecurityGroupEgress: 
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref pvpcId

  rSecGroupELB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 security group elb
      GroupName: !Join ["-",[!Ref pscgroupname,"elb"]]
      SecurityGroupEgress: 
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref pvpcId

  rELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Ref pnameELB
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref rSecGroupELB
      Subnets: 
        - !Ref psubnetId
        - !Ref psubnetId2
      Type: application
  
  rTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      IpAddressType: ipv4
      Name: DemoECS
      Port: 80
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 3
      VpcId: !Ref pvpcId

  rlistener:
    DependsOn: [rTargetGroup]
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref rELB
      DefaultActions: 
        - TargetGroupArn: !Ref rTargetGroup
          Type: forward
      Port: 80
      Protocol: HTTP 

  rRole: 
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Role for instance profile
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
      Path: /
      Policies:
        - PolicyName: rootkms
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: kms:*
                Resource: "*"

        - PolicyName: ec2SSMasociacion
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - ssm:CreateAssociation
                Resource: 
                  - arn:aws:ec2:*:*:*

        - PolicyName: ec2SSMasociacionDocument
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - ssm:CreateAssociationDocument
                Resource: 
                  - arn:aws:ssm:*:*:*
        - PolicyName: GetParameterStore
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Action:
              - "autoscaling:DescribeAutoScalingGroups"
              - "autoscaling:DescribeAutoScalingInstances"
              - "autoscaling:DescribeScalingActivities"
              - "autoscaling:DescribeScalingProcessTypes"
              - "autoscaling:DescribeScheduledActions"
              - "autoscaling:DescribeAutoScalingNotificationTypes"
              - "autoscaling:DescribePolicies"
              - "autoscaling:DescribeLifecycleHooks"
              Resource: arn:aws:ssm:*:*:*
              Effect: Allow
        - PolicyName: ECS
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Action:
              - "ec2:DescribeTags"
              - "ecs:CreateCluster"
              - "ecs:DeregisterContainerInstance"
              - "ecs:DiscoverPollEndpoint"
              - "ecs:Poll"
              - "ecs:RegisterContainerInstance"
              - "ecs:StartTelemetrySession"
              - "ecs:UpdateContainerInstancesState"
              - "ecs:Submit*"
              - "ecr:GetAuthorizationToken"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "ecs:TagResource"
              Resource: "*"
              Effect: Allow

  rInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Ref pprofilename
      Path: /
      Roles: 
        - !Ref rRole

  rlaunchtemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateData: 
        ImageId: !Ref LatestECSOptimizedAMI
        Monitoring: 
          Enabled: true
        InstanceType: t2.micro
        NetworkInterfaces: 
          - AssociatePublicIpAddress: "True"
            Groups: 
              - !Ref rSecGroup
            DeleteOnTermination: "True"
            DeviceIndex: "0"
            SubnetId: !Ref psubnetId
        KeyName: "jumpbox"
        BlockDeviceMappings: 
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination : True
              VolumeSize: 200
              VolumeType: gp3
              Encrypted: False
          - DeviceName: /dev/sdf
            Ebs:
              DeleteOnTermination : True
              VolumeSize: 8
              VolumeType: gp3
              Encrypted: False

        IamInstanceProfile: 
          Arn: !GetAtt rInstanceProfile.Arn
        UserData:
          Fn::Base64:
            !Sub | 
                #!/bin/bash
                yum update -y
                yum install -y httpd
                yum -y install epel-release
                yum -y install htop
                sudo yum install awscli
                sudo mkfs -t xfs /dev/xvdf
                sudo mkdir /data
                sudo mount /dev/xvdf /data
                systemctl start httpd
                systemctl enable httpd
                echo "<h1>Hello Mundo from $(hostname -f) </h1>" > /var/www/html/index.html
                echo ECS_CLUSTER=Cloudtest >> /etc/ecs/ecs.config;

      LaunchTemplateName: Templateasg

  rasg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: demoasgcloud
      Cooldown: 300
      DefaultInstanceWarmup: 20
      DesiredCapacity: 1
      DesiredCapacityType: units
      HealthCheckType: ELB
      LaunchTemplate: 
        LaunchTemplateId: !Ref rlaunchtemplate
        Version: !GetAtt rlaunchtemplate.LatestVersionNumber
      MaxSize: 5
      MinSize: 1
      TerminationPolicies: 
        - OldestInstance
        - OldestLaunchConfiguration
        - OldestLaunchTemplate
      VPCZoneIdentifier: 
        - !Ref psubnetId
        - !Ref psubnetId2

  rCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      Name: ProvidedTest
      AutoScalingGroupProvider: 
        AutoScalingGroupArn: !Ref rasg
        ManagedScaling: 
          Status: ENABLED
          TargetCapacity: 100
        ManagedTerminationProtection: DISABLED

  rECS:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: Cloudtest
      ClusterSettings: 
        - Name: "containerInsights"
          Value: "disabled"
      Configuration: 
        ExecuteCommandConfiguration: 
          Logging: DEFAULT

  rCPAProvideraSSOCIATION:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      CapacityProviders: 
        - FARGATE
        - FARGATE_SPOT
        - !Ref rCapacityProvider
      Cluster: !Ref rECS
      DefaultCapacityProviderStrategy: 
        - Base: 0
          CapacityProvider: !Ref rCapacityProvider
          Weight: 1
  
  rtask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions: 
        - Image: nginxdemos/hello
          Name: Democloudformation
      Cpu: 1 vCPU
      ExecutionRoleArn: arn:aws:iam::697289108405:role/ecsTaskExecutionRole
      Memory: 3 GB
      NetworkMode: awsvpc
      RequiresCompatibilities: 
        - FARGATE
      RuntimePlatform: 
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX

  rECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref rECS
      DeploymentConfiguration: 
        DeploymentCircuitBreaker: 
          Enable: true
          Rollback: true
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController: 
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers: 
        - ContainerName: Democloudformation
          ContainerPort: 80
          TargetGroupArn: !Ref rTargetGroup
      NetworkConfiguration: 
        AwsvpcConfiguration: 
          AssignPublicIp: ENABLED
          SecurityGroups: 
            - !Ref rSecGroup
          Subnets: 
            - !Ref psubnetId
            - !Ref psubnetId2
      PlatformVersion: "LATEST"
      SchedulingStrategy: REPLICA
      ServiceConnectConfiguration: 
        Enabled: false
      ServiceName: Democloudformation
      TaskDefinition: !GetAtt rtask
